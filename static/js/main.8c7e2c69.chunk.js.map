{"version":3,"sources":["../../src/context/ContextSliderConfig.js","../../src/utils/functions/FunctionStartContinuousAnimation.js","../../src/modules/ModuleModeContinuous/ModuleModeContinuous.js","../../src/components/ComponentSlide/ComponentSlide.js","../../src/utils/functions/FunctionIfEnoughToRotate.js","../../src/utils/functions/FunctionCalculateSlidesWidth.js","../../src/core/CoreModeHandler.js","../../src/index.js","App.js","index.js"],"names":["ContextSliderConfig","createContext","reducer","state","pair","initialState","SliderConfigProvider","props","useReducer","value","update","JedliContinuous","useContext","tracksContainer","useRef","track","useState","useEffect","Object","tracksContainerWidth","newState","startRotate","context","widthOfAllSlides","slideWidth","continuousSpeed","speed","_startContinuousAnimation","setIsRotating","stopRotate","ref","className","style","height","key","index","isCloned","JedliSlide","rest","slideContainer","setSlideWidth","newAllSlidesWidth","allSlidesWidth","console","_ifEnoughToRotate","setAllStyles","width","visibleSlides","_calculateSlidesWidth","allStyles","CoreModeHandler","JedliSlider","overflow","mode","sliderConfig","tag","slidesWidth","pauseOnHover","direction","responsive","easing","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c7e2c69.chunk.js","sourcesContent":["import React, { createContext, useReducer } from \"react\";\r\n\r\nexport const ContextSliderConfig = createContext();\r\n\r\nconst reducer = (state, pair) => ({ ...state, ...pair });\r\n\r\nconst initialState = {}\r\n\r\nexport function SliderConfigProvider(props) {\r\n    const [state, update] = useReducer(reducer, initialState)\r\n\r\n    return (\r\n        <ContextSliderConfig.Provider value={{ state, update }}>\r\n            {props.children}\r\n        </ContextSliderConfig.Provider>\r\n    )\r\n};","/**\r\n * Calculate size for all given slides, works if size of slides should be specified\r\n * @param {object} context - context with info about current configuration of slider\r\n * @param {ref} track - track element to animate slides\r\n */\r\nconst _startContinuousAnimation = (context, track) => {\r\n    // Check if there should be pause on hover\r\n    if (context.pauseOnHover) {\r\n        track.classList.add(\"jedli-hover-pause\");\r\n    }\r\n\r\n    // Set direction of animation\r\n    switch (context.direction) {\r\n        case \"ltr\":\r\n            track.style.animationDirection = \"reverse\";\r\n\r\n            break;\r\n\r\n        case \"rtl\":\r\n            track.style.animationDirection = \"normal\";\r\n\r\n            break;\r\n    }\r\n\r\n    // Add styles for animation purposes to track\r\n    // If mode == continuous, options.speed is speed for every px of all slides width\r\n\r\n    let widthOfAllSlides = 0;\r\n\r\n    context.allSlidesWidth.forEach(slideWidth => {\r\n        slideWidth ? widthOfAllSlides += slideWidth : '';\r\n    })\r\n\r\n    const speed = widthOfAllSlides / context.speed * 1000;\r\n\r\n    const continuousSpeed = speed / 1000 + \"s\";\r\n    track.style.animationDuration = continuousSpeed;\r\n    track.style.animationTimingFunction = context.easing;\r\n\r\n}\r\n\r\nexport default _startContinuousAnimation;","import React, { useEffect, useState, useRef, useContext } from 'react';\r\nimport { ContextSliderConfig } from \"../../context/ContextSliderConfig\"\r\n\r\nimport _startContinuousAnimation from \"../../utils/functions/FunctionStartContinuousAnimation\";\r\n\r\n\r\nconst JedliContinuous = () => {\r\n    const { state, update } = useContext(ContextSliderConfig);\r\n\r\n    const tracksContainer = useRef(false);\r\n    const track = useRef(false);\r\n\r\n    // State if slider is already rotating\r\n    const [isRotating, setIsRotating] = useState(false);\r\n\r\n    // Push props of slider to context\r\n    useEffect(() => {\r\n        if (Object.keys(state).length && tracksContainer.current) {\r\n            // Get size of tracks container\r\n            const tracksContainerWidth = tracksContainer.current.offsetWidth;\r\n\r\n            if (state.tracksContainer !== tracksContainerWidth) {\r\n                // Push size of tracks container to context\r\n                let newState = state;\r\n                newState.tracksContainerWidth = tracksContainerWidth;\r\n\r\n                update(newState)\r\n            }\r\n        }\r\n    }, [tracksContainer.current])\r\n\r\n\r\n    // Function to start rotation of slider\r\n    const startRotate = () => {\r\n        // Call function to start animation\r\n        _startContinuousAnimation(state, track.current)\r\n\r\n        // Check if is already rotating\r\n        if (isRotating) {\r\n            return false\r\n        }\r\n\r\n        // If is not rotating, start it\r\n        setIsRotating(true);\r\n\r\n\r\n    }\r\n\r\n    const stopRotate = () => {\r\n\r\n        // Check if is already rotating\r\n        if (isRotating) {\r\n            // If is rotating, stop it\r\n            setIsRotating(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div ref={tracksContainer} className='jedli-track-container' style={state.overflow === \"hidden\" ? { overflow: 'hidden' } : {}, track.current ? { height: track.current.offsetHeight + \"px\" } : {}}>\r\n            <div ref={track} className='jedli-track'>\r\n                {state.children ? state.children.map((children, index) => (\r\n                    <React.Fragment key={index}>\r\n                        {/* Check if slider should rotate. And if so, add all slides twice, but with special attribute that they are cloned to cloned slides */}\r\n                        {React.cloneElement(children, { index: index, startRotate: startRotate, stopRotate: stopRotate })}\r\n                    </React.Fragment>\r\n                )) : ''}\r\n                {/* If rotating is set at true, clone all slides */}\r\n                {state.children && isRotating ? state.children.map((children, index) => (\r\n                    <React.Fragment key={index}>\r\n                        {/* Check if slider should rotate. And if so, add all slides twice, but with special attribute that they are cloned to cloned slides */}\r\n                        {React.cloneElement(children, { index: index, startRotate: startRotate, stopRotate: stopRotate, isCloned: true })}\r\n                    </React.Fragment>\r\n                )) : ''}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JedliContinuous;","import React, { useEffect, useRef, useState, useContext } from 'react';\r\nimport styles from './ComponentSlide.module.css'\r\nimport { ContextSliderConfig } from \"../../context/ContextSliderConfig\"\r\n\r\n// Function to set slide with depends of specified number of visible slides\r\nimport _calculateSlidesWidth from \"../../utils/functions/FunctionCalculateSlidesWidth\";\r\n\r\n// Function to calculate if slider should rotate with current slides size\r\nimport _ifEnoughToRotate from \"../../utils/functions/FunctionIfEnoughToRotate\";\r\n\r\n\r\nconst JedliSlide = (\r\n    {\r\n        className,\r\n        startRotate,\r\n        stopRotate,\r\n        isCloned,\r\n        ...rest\r\n    }\r\n) => {\r\n    const { state, update } = useContext(ContextSliderConfig);\r\n\r\n    // Container for slide\r\n    const slideContainer = useRef(false)\r\n\r\n    const [slideWidth, setSlideWidth] = useState(false);\r\n    const [allStyles, setAllStyles] = useState(rest.style);\r\n\r\n    // Remove style from \"rest\" props\r\n    delete rest.style\r\n\r\n    /**\r\n     * return width of current slide\r\n     */\r\n    const getWidth = () => {\r\n        return slideWidth;\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (slideContainer.current) {\r\n            // If ref exists\r\n\r\n            // Save width of slide\r\n            setSlideWidth(slideContainer.current.offsetWidth)\r\n\r\n            if (slideWidth) {\r\n                // If slide width is already calculated, save it to context with info about all widths with unique index\r\n\r\n                // But ignore cloned slides\r\n                if (!isCloned) {\r\n                    let newAllSlidesWidth = [...state.allSlidesWidth];\r\n                    newAllSlidesWidth[rest.index] = slideWidth;\r\n\r\n                    const newState = { ...state, allSlidesWidth: newAllSlidesWidth }\r\n\r\n                    if (state.allSlidesWidth[rest.index] !== slideWidth) {\r\n                        update(newState)\r\n\r\n\r\n                        if (_ifEnoughToRotate(newState)) {\r\n                            // If is enough to rotate, call function on parent to rotate\r\n                            startRotate();\r\n                        }\r\n                        else {\r\n                            stopRotate();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Save info about width of this slide\r\n\r\n            // Check if size of slide should be calculated\r\n            if (state.slidesWidth === \"equal\") {\r\n                // If true, do it\r\n                setAllStyles({ ...allStyles, width: _calculateSlidesWidth(state.visibleSlides, state.tracksContainerWidth) + \"px\" })\r\n            }\r\n\r\n        }\r\n    }, [slideContainer, state])\r\n\r\n    return (\r\n        <div ref={slideContainer} className={`jedli-slider ${isCloned ? 'isCloned' : ''} ${className ? className : ''}`} {...rest} style={allStyles}>{rest.children}</div>\r\n    )\r\n}\r\n\r\nexport default JedliSlide;","/**\r\n * Calculate size for all given slides, works if size of slides should be specified\r\n * @param {object} context - context with info about current configuration of slider\r\n */\r\nconst _ifEnoughToRotate = (context) => {\r\n    // Check if this mode should have specified number of slides to rotate, or should it be calculated by slides with\r\n    switch (context.slidesWidth) {\r\n        case \"equal\":\r\n            // If slides should be equal, check if number of slides is bigger than number of slides that should be visible\r\n            return context.children.length > context.visibleSlides\r\n\r\n        case \"auto\":\r\n            // If slides can have their own width, calculate if width of all slides is greater than with of wrapper\r\n            if (context.allSlidesWidth.length) {\r\n                // Sum width of all slides\r\n                let widthOfAllSlides = 0;\r\n\r\n                context.allSlidesWidth.forEach(slideWidth => {\r\n                    slideWidth ? widthOfAllSlides += slideWidth : '';\r\n                })\r\n\r\n                return widthOfAllSlides > context.tracksContainerWidth\r\n            }\r\n\r\n            break;\r\n\r\n        default:\r\n            console.error(\"jedliSlider error! Cannot find given slidesWidth. Available options: 'auto', 'equal'\")\r\n            return false;\r\n\r\n    }\r\n}\r\n\r\nexport default _ifEnoughToRotate;","\r\n/**\r\n * Calculate size for all given slides, works if size of slides should be specified\r\n * @param {int} visibleSlides - number of visible slides\r\n * @param {int} tracksContainerWidth - width of container with all tracks\r\n * @return {int} width of slide to add\r\n */\r\nconst _calculateSlidesWidth = (visibleSlides, tracksContainerWidth) => {\r\n    // Calculate size where size is width of tracksContainer / number of visible slides + px\r\n    const sizePerSlide = tracksContainerWidth / visibleSlides;\r\n\r\n    return sizePerSlide;\r\n}\r\n\r\nexport default _calculateSlidesWidth;","import React, { useContext, useEffect } from 'react';\r\nimport JedliContinuous from \"../modules/ModuleModeContinuous/ModuleModeContinuous\";\r\n\r\nimport { ContextSliderConfig } from \"../context/ContextSliderConfig\"\r\n\r\nconst CoreModeHandler = (props) => {\r\n    const { state, update } = useContext(ContextSliderConfig);\r\n\r\n    // Push props of slider to context\r\n    useEffect(() => {\r\n        update(props.sliderConfig);\r\n    }, [props])\r\n\r\n    // Init right mode\r\n    // By default and for now the only mode is continuous\r\n    switch (\"continuous\") {\r\n        case \"continuous\":\r\n            // Init mode continuous with given context\r\n            return (\r\n                <JedliContinuous>{props.children}</JedliContinuous>\r\n            )\r\n\r\n            break;\r\n\r\n        default:\r\n            console.error(\"mode not found\")\r\n            break;\r\n    }\r\n}\r\n\r\nexport default CoreModeHandler;","import React, { useState } from 'react'\r\nimport \"./styles.scss\"\r\n\r\nimport JedliContinuous from \"./modules/ModuleModeContinuous/ModuleModeContinuous\";\r\nimport JedliSlide from \"./components/ComponentSlide/ComponentSlide\";\r\nimport CoreModeHandler from \"./core/CoreModeHandler\";\r\n\r\nimport { SliderConfigProvider } from \"./context/ContextSliderConfig\"\r\n\r\nconst JedliSlider = (props) => {\r\n  const {\r\n    className,\r\n    tag,\r\n    children,\r\n    mode,\r\n    slidesWidth,\r\n    speed,\r\n    visibleSlides,\r\n    overflow,\r\n    pauseOnHover,\r\n    direction,\r\n    responsive,\r\n    allSlidesWidth,\r\n    easing,\r\n    ...rest\r\n  } = props;\r\n\r\n  return (\r\n    <SliderConfigProvider>\r\n      <div id=\"test\" className={`jedli-slider ${overflow === \"hidden\" ? 'jedli-overflow-hidden' : ''} ${className ? className : ''} ${mode === 'continuous' ? 'jedli-mode-continuous' : ''}`} {...rest}>\r\n        <CoreModeHandler sliderConfig={props}>{props.children}</CoreModeHandler>\r\n      </div>\r\n    </SliderConfigProvider>\r\n  )\r\n}\r\n\r\nJedliSlider.defaultProps = {\r\n  tag: 'div',\r\n  mode: \"continuous\",\r\n  slidesWidth: \"equal\",\r\n  speed: 100,\r\n  visibleSlides: 1,\r\n  overflow: \"hidden\",\r\n  pauseOnHover: false,\r\n  direction: \"ltr\",\r\n  responsive: {},\r\n  allSlidesWidth: [],\r\n  easing: \"linear\"\r\n}\r\n\r\nexport { JedliContinuous, JedliSlide };\r\nexport default JedliSlider;\r\n","import React from 'react'\r\n\r\nimport JedliSlider, { JedliSlide } from 'react-jedlislider'\r\nimport 'react-jedlislider/dist/index.css'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div>\r\n      <br></br>\r\n      <h3>slidesWidth=\"auto\"</h3>\r\n      <br></br>\r\n      <JedliSlider slidesWidth=\"auto\">\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>1</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>2</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>3</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>4</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>5</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>6</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>7</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>8</span>\r\n        </JedliSlide>\r\n      </JedliSlider>\r\n\r\n      <br /><br /><br /><br /><br /><br />\r\n\r\n      <h3>slidesWidth=\"equal\"<br></br> visibleSlides={3}</h3>\r\n      <br></br>\r\n      <JedliSlider visibleSlides={3}>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>1</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>2</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>3</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>4</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>5</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>6</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>7</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>8</span>\r\n        </JedliSlide>\r\n      </JedliSlider>\r\n\r\n      <br /><br /><br /><br /><br /><br />\r\n\r\n      <h3>slidesWidth=\"equal\"<br></br> visibleSlides={4} <br></br> direction=\"rtl\"</h3>\r\n      <br></br>\r\n      <JedliSlider visibleSlides={4} direction=\"rtl\">\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>1</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>2</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>3</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>4</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>5</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>6</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>7</span>\r\n        </JedliSlide>\r\n        <JedliSlide className='example-slide example-slide-auto'>\r\n          <span>8</span>\r\n        </JedliSlide>\r\n      </JedliSlider>\r\n    </div>\r\n\r\n  )\r\n}\r\n\r\nexport default App\r\n","import './index.css'\r\n\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n"],"sourceRoot":""}